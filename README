MPL Language 

	Music Processing Language

-------------------------

Authors: Bo Wang, Yilin Xiong, Shengyi Lin, Ying Tan, Mengting Wu.

==================================================================

1 Introduction

Getting bored of recording your inspiration note by note on the paper? 
Want to know how does your music sound for some specified instrument directly? Instead of creating monotonous rhythm, want to create more attractive music? MPL is aimed at providing a non-traditional way for professional musicians or even beginners to create their own music easily and conveniently. Compositions can be completed with dynamics, arpeggios, accelerando, staccatos, repeats, and much more by simply using multiple libraries of existing data structures, operations and functions provided or create your own programmatically. Compose, record and arrange your song programmatically, your creativity can simply go wild by using a language like this!

==================================================================

2. File Introduction

	Doc -
		Including White Paper, Tutorial, Language Reference Manual, and Report.
	
	Translator -
		The Translator code for 

	JavaEnvironment -
		Code for java environment supporting compiling MPL.

	MIDI (GoogleCode) -
		Google API we used to deal with Midi file.

	ShellScript -
		Shell script to compile MPL.

	TestCases -
		Examples and test cases for MPL. 


==================================================================

3. How to Run

To compile and run MPL language, it is require to have binary file -- “MPL” to translate and JAR file -- “MPL.jar” for environment. For simplification, “MPL.sh” implements all the process from translating, compiling to running. They can be found in ShellScript directory. If you are under operating system like Linus, MacOS, or UNIX, you can compile and run your program with the command

	/path/to/MPL/MPL.sh /path/to/MPL/ your_program.mpl result_name

If you are under an operating system not satisfying the requirement above, like Windows, you can run translating, compiling, and running separately:

	/path/to/MPL/MPL your_program.mpl result_name
	javac -cp /path/to/MPL/MPL.jar result_name.java
	java -cp .:/path/to/MPL/MPL.jar result_name

==================================================================

4. Simple Example -- Hello World

In MPL, the program to print “hello world” is

	void main(String arg[]) {
		print(“Hello World!\n”);
	}

If you haven’t botched anything, such as omitting a character or misspelling something, the hello.mpl program will proceed silently, and make an executable file called hello. If you run hello by typing the command

	./MPL.sh ./ hello.mpl hello

It will print : Hello World!

==================================================================