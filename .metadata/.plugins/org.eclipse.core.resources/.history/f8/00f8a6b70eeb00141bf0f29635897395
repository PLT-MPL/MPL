package test;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import definition.*;
import function.PublicFunction;

import com.leff.midi.*;
import com.leff.midi.event.MidiEvent;
import com.leff.midi.event.NoteOff;
import com.leff.midi.event.NoteOn;
import com.leff.midi.event.ProgramChange;
import com.leff.midi.event.meta.Tempo;
import com.leff.midi.event.meta.TimeSignature;

public class test {

	public static void createMidi(String fileName){
        // 1. Create some MidiTracks
		//        MidiTrack tempoTrack = new MidiTrack();
        MidiTrack noteTrack = new MidiTrack();

        // 2. Add events to the tracks
        // 2b. Track 1 will have some notes in it
        // channel, pitch, strength, startTime, duration
        noteTrack.insertNote(0, 60, 100, 0, 500);
        noteTrack.insertNote(0, 62, 100, 500, 500);
        noteTrack.insertNote(0, 64, 100, 1000, 500);
        noteTrack.insertNote(0, 65, 100, 1500, 500);
        noteTrack.insertNote(0, 67, 100, 2000, 500);

        MidiEvent pc1 = new ProgramChange(0, 1, 23);
        noteTrack.insertEvent(pc1);
        
        // It's best not to manually insert EndOfTrack events; MidiTrack will
        // call closeTrack() on itself before writing itself to a file

        // 3. Create a MidiFile with the tracks we created
        ArrayList<MidiTrack> tracks = new ArrayList<MidiTrack>();
        tracks.add(noteTrack);
        

        
        
        MidiFile midi = new MidiFile(MidiFile.DEFAULT_RESOLUTION, tracks);

        // 4. Write the MIDI data to a file
        File output = new File(fileName);
        try
        {
            midi.writeToFile(output);
        }
        catch(IOException e)
        {
            System.err.println(e);
        }
	}
	
	
	public static void modifyMidi(String fileName){
		// 1. Open up a MIDI file
        MidiFile mf = null;
        File input = new File(fileName);

        try
        {
            mf = new MidiFile(input);
        }
        catch(IOException e)
        {
            System.err.println("Error parsing MIDI file:");
            e.printStackTrace();
            return;
        }

        // 2. Do some editing to the file
        // 2a. Strip out anything but notes from track 1
        MidiTrack T = mf.getTracks().get(0);
        
        
        // It's a bad idea to modify a set while iterating, so we'll collect
        // the events first, then remove them afterwards
        Iterator<MidiEvent> it = T.getEvents().iterator();
        ArrayList<MidiEvent> eventsToRemove = new ArrayList<MidiEvent>();

        while(it.hasNext())
        {
        	
            MidiEvent E = it.next();
            if(E.getClass().equals(ProgramChange.class)){
            	ProgramChange p = (ProgramChange) E;
            	System.out.println("Program #: " + p.getProgramNumber());
            	System.out.println();
            }
            if(E.getClass().equals(NoteOn.class))
            {
                NoteOn n = (NoteOn) E;
                System.out.println("Channel: " + n.getChannel());
                System.out.println("Tick: " + n.getTick());
                System.out.println("Value: " + n.getNoteValue());
                System.out.println("Velocity: " + n.getVelocity());
                System.out.println("Type: " + n.getType());
                System.out.println();
            }
        }

        for(MidiEvent E : eventsToRemove)
        {
            T.removeEvent(E);
        }


        // 3. Save the file back to disk
        try
        {
            mf.writeToFile(input);
        }
        catch(IOException e)
        {
            System.err.println("Error writing MIDI file:");
            e.printStackTrace();
        }
	}
	
	public static void main(String[] args) {
		//createMidi("out.mid");
		//modifyMidi("out.mid");
        
//		PublicFunction.setNoteDefault(C.C4, 0, 250, 200); 
//		/*
//		 * 2. Note notes0[] = {Note((), Note(), Note(G4), Note(G4), 
//							Note(A4), Note(A4),Note(G4, 500), Note(F4), Note(F4), 
//							Note(E4), Note(E4),Note(D4), Note(D4), Note(C4, 500)}; 
//		 * */
//		List<Note> notes0 = new ArrayList<Note>(Arrays.asList(new Note(), new Note(),
//				new Note(C.G4),new Note(C.G4),new Note(C.A4),new Note(C.A4),new Note(C.G4,500),
//				new Note(C.F4),new Note(C.F4),new Note(C.E4),new Note(C.E4),new Note(C.D4),new Note(C.D4),
//				new Note(C.C4,500)));
//		/*
//		notes0.add(new Note());
//		notes0.add(new Note());;
//		notes0.add(new Note(C.G4));
//		notes0.add(new Note(C.A4));
//		notes0.add(new Note(C.A4));
//		notes0.add(new Note(C.G4,500));
//		notes0.add(new Note(C.F4));
//		notes0.add(new Note(C.F4));
//		notes0.add(new Note(C.E4));
//		notes0.add(new Note(C.E4));
//		notes0.add(new Note(C.D4));
//		notes0.add(new Note(C.D4));
//		notes0.add(new Note(C.C4,500));
//		*/
//		
//		//3. setNoteDefault(C4, 500, 0, 200); 
//		PublicFunction.setNoteDefault(C.C4, 0, 500, 200); 
//		
//		/* 4.
//		Note  notes1[]  =  {Note(),  Note(G4),  Note(A4),Note(G4), 
//				Note(F4), Note(E4),Note(D4), Note()}; 
//				*/
//		List<Note> notes1 = new ArrayList<Note>(Arrays.asList(new Note(),new Note(C.G4),
//				new Note(C.A4),new Note(C.G4),new Note(C.F4),new Note(C.E4),
//				new Note(C.D4),new Note()));
//		
//		//5. Melody melody0(notes0), melody1(notes1); 
//		Melody melody0 =  new Melody(notes0);
//		Melody melody1 = new Melody(notes1);
//		
//		/* 6.
//		Track tracks[] = {Track(melody0, PIANO), 
//				Track(melody1, VIOLIN)}; 
//				*/
//		List<Track> tracks = new ArrayList<Track>(Arrays.asList(new Track(melody0,C.PIANO),
//				new Track(melody1, C.VIOLIN)));
//		
//		
//		//7. Music music(tracks);
//		Music music = new Music(tracks);
//		
//		//8. write(music, ¡°~/Desktop/twinkle_twinkle.midi¡±);
//		PublicFunction.write(music, "twinkle_twinkle.mid");
		
		// Read and Write
		Music msc = PublicFunction.read("twinkle_twinkle.mid");
		System.out.println("\n/******data******/");
		System.out.println("number of tracks: " + msc.getNumberOfTracks());
		for(int i = 0; i < msc.getNumberOfTracks(); i++){
			Track track = msc.getTrack(i);
			System.out.println(track.getTimbre());
			List<Note> notelist = track.getMelody().getNoteList();
			//int tempo = 120; 
			for(Note note: notelist){
				int pitch = note.getPitch();
				long duration = note.getDuration();
				long startTime = note.getStartTime();
				int strength = note.getStrength();
				System.out.println(pitch + ", " + strength + ", " 
						+ startTime + ", " + duration);
			 }
		}
		PublicFunction.write(msc, "twinkle_twinkle2.mid");
		
        System.out.println("Done...");
	}
}
